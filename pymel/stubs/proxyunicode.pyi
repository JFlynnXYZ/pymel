from typing import Iterable, List, Optional, Tuple, Union

class ProxyUnicode:
    def center(self, width: int, fillchar: str = ...) -> str: ...
    def endswith(self, suffix: Union[str, Tuple[str, ...]], start: int = ..., end: int = ...) -> bool: ...
    def find(self, sub: str, start: int = ..., end: int = ...) -> int: ...
    def format(self, *args: object, **kwargs: object) -> str: ...
    def isdecimal(self) -> bool: ...
    def isidentifier(self) -> bool: ...
    def islower(self) -> bool: ...
    def isnumeric(self) -> bool: ...
    def isprintable(self) -> bool: ...
    def isupper(self) -> bool: ...
    def join(self, iterable: Iterable[str]) -> str: ...
    def ljust(self, width: int, fillchar: str = ...) -> str: ...
    def lower(self) -> str: ...
    def lstrip(self, chars: str = ...) -> str: ...
    def partition(self, sep: str) -> Tuple[str, str, str]: ...
    def replace(self, old: str, new: str, count: int = ...) -> str: ...
    def rfind(self, sub: str, start: int = ..., end: int = ...) -> int: ...
    def rindex(self, sub: str, start: int = ..., end: int = ...) -> int: ...
    def rjust(self, width: int, fillchar: str = ...) -> str: ...
    def rpartition(self, sep: str) -> Tuple[str, str, str]: ...
    def rsplit(self, sep: Optional[str] = ..., maxsplit: int = ...) -> List[str]: ...
    def rstrip(self, chars: str = ...) -> str: ...
    def split(self, sep: Optional[str] = ..., maxsplit: int = ...) -> List[str]: ...
    def startswith(self, prefix: Union[str, Tuple[str, ...]], start: int = ..., end: int = ...) -> bool: ...
    def strip(self, chars: str = ...) -> str: ...
    def upper(self) -> str: ...
    def __add__(self, s: str) -> str: ...
    def __eq__(self, x: object) -> bool: ...
    def __ne__(self, x: object) -> bool: ...
    def __lt__(self, x: object) -> bool: ...
    def __le__(self, x: object) -> bool: ...
    def __gt__(self, x: object) -> bool: ...
    def __ge__(self, x: object) -> bool: ...
