import types
from _typeshed import Incomplete
from collections import defaultdict as defaultdict
from future.utils import with_metaclass as with_metaclass
from typing import Any, Iterable, Type, TypeVar

TYPE_CHECKING = False
T = TypeVar('T')

class Singleton(type):
    def __new__(mcl, classname, bases, classdict): ...

class metaStatic(Singleton):
    def __new__(mcl, classname, bases, classdict): ...

class defaultlist(list):
    default_factory: Incomplete
    def __init__(self, default_factory, *args, **kwargs) -> None: ...
    def __setitem__(self, index, item) -> None: ...
    def __getitem__(self, index): ...

class ModuleInterceptor:
    module: Incomplete
    callback: Incomplete
    def __init__(self, moduleName, callback) -> None: ...
    def __getattr__(self, attr): ...

def readonly(f): ...

class metaReadOnlyAttr(type):
    def __setattr__(cls, name, value) -> None: ...
    def __new__(mcl, classname, bases, classdict): ...

NOT_PROXY_WRAPPED: Incomplete

def proxyClass(cls, classname: str, dataAttrName: str = ..., dataFuncName: str = ..., remove: Iterable[str] = ..., makeDefaultInit: bool = ..., sourceIsImmutable: bool = ..., module: Any = ...) -> Type[T]: ...

class universalmethod:
    f: Incomplete
    __doc__: Incomplete
    def __init__(self, f) -> None: ...
    def __get__(self, instance, cls: Incomplete | None = ...): ...

class LazyLoadModule(types.ModuleType):
    class LazyLoader:
        creator: Incomplete
        args: Incomplete
        kwargs: Incomplete
        name: Incomplete
        def __init__(self, name, creator, *creatorArgs, **creatorKwargs) -> None: ...
        newobj: Incomplete
        def __get__(self, obj, objtype): ...
    def __new__(cls, name, contents, autoSubClass: bool = ...): ...
    def __init__(self, name, contents, autoSubClass: bool = ...) -> None: ...
    def __dir__(self): ...
    def __setitem__(self, attr, args) -> None: ...
    def __getitem__(self, attr): ...

class LazyDocStringError(Exception): ...

class LazyDocString:
    documentedObj: Incomplete
    docGetter: Incomplete
    args: Incomplete
    kwargs: Incomplete
    def __init__(self, argList) -> None: ...

def makeMethod(name): ...
def addLazyDocString(obj, creator, *creatorArgs, **creatorKwargs) -> None: ...

class TwoWayDict(dict):
    def __init__(self, *args, **kwargs) -> None: ...
    def __setitem__(self, k, v) -> None: ...
    def has_value(self, v): ...
    def __delitem__(self, k) -> None: ...
    def clear(self) -> None: ...
    def copy(self): ...
    def pop(self, k): ...
    def popitem(self, **kws) -> None: ...
    def setdefault(self, **kws) -> None: ...
    def update(self, *args, **kwargs) -> None: ...
    def get_key(self, v): ...

class EquivalencePairs(TwoWayDict):
    def __setitem__(self, k, v) -> None: ...
    def __delitem__(self, key) -> None: ...
    def __getitem__(self, key): ...
    def __contains__(self, key): ...
    def get(self, key, d: Incomplete | None = ...): ...

def alias(origAttrName): ...

class propertycache:
    func: Incomplete
    name: Incomplete
    def __init__(self, func) -> None: ...
    def __get__(self, ownerInstance, ownerCls: Incomplete | None = ...): ...
